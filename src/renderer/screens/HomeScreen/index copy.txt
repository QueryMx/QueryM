import { useState, useMemo, useEffect } from 'react';
import styles from './styles.module.scss';
import DatabaseConfigEditor from './DatabaseConfigEditor';
import ButtonGroup from 'renderer/components/ButtonGroup';
import Button from 'renderer/components/Button';

import WelcomeScreen from '../WelcomeScreen';
import { useConnection } from 'renderer/App';
import SplitterLayout from 'renderer/components/Splitter/Splitter';
import TreeView, { TreeViewItemData } from 'renderer/components/TreeView';
import useConnectionContextMenu from './useConnectionContextMenu';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faAdd } from '@fortawesome/free-solid-svg-icons';
import ListViewEmptyState from 'renderer/components/ListView/ListViewEmptyState';
import { useKeybinding } from 'renderer/contexts/KeyBindingProvider';
import Layout from 'renderer/components/Layout';
import Toolbar from 'renderer/components/Toolbar';
import useNewConnectionMenu from './useNewConnectionMenu';
import { ConnectionStoreItem } from 'drivers/base/SQLLikeConnection';
import ConnectionListStorage from 'libs/ConnectionListStorage';
import Icon from 'renderer/components/Icon';

export default function HomeScreen() {
  const { connect } = useConnection();
  const [collapsedKeys, setCollapsedKeys] = useState<string[] | undefined>();

  const { binding } = useKeybinding();
  const keyRenaming = binding['rename'];

  const [renameSelectedItem, setRenameSelectedItem] = useState(false);

  const storage = useMemo(() => new ConnectionListStorage(), []);
  const [connectionList, setConnectionList] = useState<ConnectionStoreItem[]>(
    [],
  );

  useEffect(() => {
    storage.loadAll().then(() => setConnectionList(storage.getAll()));
  }, [storage, setConnectionList]);

  const treeItemList: TreeViewItemData<ConnectionStoreItem>[] = useMemo(() => {
    return connectionList.map(
      (connection): TreeViewItemData<ConnectionStoreItem> => {
        return {
          id: connection.id,
          data: connection,
          icon:
            connection.type === 'mysql' ? <Icon.MySql /> : <Icon.PostgreSQL />,
          text: connection.name,
        };
      },
    );
  }, [connectionList]);

  // -----------------------------------------------
  // Handle before select change
  // -----------------------------------------------
  // const onBeforeSelectChange = useCallback(async () => {
  //   if (hasChange && selectedItemChanged) {
  //     const buttonIndex = await window.electron.showMessageBox({
  //       title: 'Save modifications?',
  //       type: 'warning',
  //       message: `Setting for ${selectedItemChanged.name} were changed`,
  //       buttons: ['Yes', 'No', 'Cancel'],
  //     });

  //     if (buttonIndex === 0) {
  //       onSaveClick();
  //     }

  //     if (buttonIndex === 2) {
  //       return false;
  //     }
  //   }

  //   return true;
  // }, [selectedItemChanged, onSaveClick, hasChange]);

  const newConnectionMenu = useNewConnectionMenu({
    collapsedKeys,
    setSelectedItem,
    setConnections,
    setRenameSelectedItem,
    selectedItem,
    connectionTree,
  });

  const { handleContextMenu } = useConnectionContextMenu({
    connections,
    setSaveCollapsedKeys,
    collapsedKeys,
    setSelectedItem,
    setConnections,
    setRenameSelectedItem,
    selectedItem,
    connectionTree,
    newConnectionMenu,
  });

  return (
    <div className={styles.dashboard}>
      <SplitterLayout
        secondaryMinSize={200}
        primaryIndex={1}
        secondaryInitialSize={300}
        primaryMinSize={500}
      >
        <div
          className={styles.connectionList}
          onKeyDown={(e) => {
            if (keyRenaming.match(e)) {
              setRenameSelectedItem(true);
            }
          }}
          tabIndex={0}
        >
          <Layout>
            <Layout.Fixed>
              <Toolbar>
                <Toolbar.ContextMenu
                  icon={<FontAwesomeIcon icon={faAdd} />}
                  text=""
                  items={newConnectionMenu}
                />
              </Toolbar>
            </Layout.Fixed>
            <Layout.Grow>
              <TreeView
                renameSelectedItem={renameSelectedItem}
                items={treeItemList}
                collapsedKeys={collapsedKeys}
                onSelectChange={setSelectedItem}
                onDoubleClick={(item) => {
                  if (item.data?.config) {
                    connect(item.data?.config);
                  }
                }}
                selected={selectedItem}
                onBeforeSelectChange={onBeforeSelectChange}
                onContextMenu={handleContextMenu}
                emptyState={
                  <ListViewEmptyState text="There is no database setting. Right click to create new setting." />
                }
              />
            </Layout.Grow>
          </Layout>
        </div>

        <div className={styles.connectionDetail}>
          {selectedItemChanged && (
            <div className={styles.databaseActionFooter}>
              <ButtonGroup>
                <Button
                  primary
                  onClick={() => {
                    if (hasChange) {
                      window.electron
                        .showMessageBox({
                          title: 'Save Your Change',
                          message:
                            'Do you want to save this connection setting?',
                          buttons: ['Yes', 'No'],
                        })
                        .then((buttonIdx) => {
                          if (buttonIdx === 0) {
                            onSaveClick();
                          }
                          connect(selectedItemChanged);
                        });
                    } else {
                      connect(selectedItemChanged);
                    }
                  }}
                >
                  Connect
                </Button>
                <Button primary onClick={onSaveClick} disabled={!hasChange}>
                  Save
                </Button>
              </ButtonGroup>
            </div>
          )}

          {selectedItemChanged ? (
            <div className={styles.databaseDetailContainer}>
              <DatabaseConfigEditor
                key={selectedItemChanged.id}
                value={selectedItemChanged}
                onChange={setSelectedItemChanged}
              />
            </div>
          ) : !selectedItem?.data?.nodeType ? (
            <WelcomeScreen />
          ) : (
            <div />
          )}
        </div>
      </SplitterLayout>
    </div>
  );
}
