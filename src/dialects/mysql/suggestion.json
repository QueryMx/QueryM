{
  "abs": {
    "syntax": "ABS(X)",
    "description": "<p>Returns the absolute value of X, or NULL if X is NULL.</p>"
  },
  "acos": {
    "syntax": "ACOS(X)",
    "description": "<p>Returns the arc cosine of X, that is, the value whose cosine is X. Returns NULL if X is not in the range -1 to 1, or if X is NULL.</p>\n<hr />\n<p><strong>Example:</strong></p>\n<pre><code>SELECT ACOS(1);\n-&gt; 0\n\nSELECT ACOS(1.0001);\n-&gt; NULL\n</code></pre>"
  },
  "adddate": {
    "syntax": "ADDDATE(date,INTERVAL expr unit), ADDDATE(date,days)",
    "description": "<p>When invoked with the INTERVAL form of the second argument, ADDDATE() is a synonym for DATE<em>ADD(). The related function SUBDATE() is a synonym for DATE</em>SUB(). For information on the INTERVAL unit argument, see Temporal Intervals.</p>\n<pre><code>SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n-&gt; '2008-02-02'\n</code></pre>"
  },
  "addtime": {
    "syntax": "ADDTIME(expr1,expr2)",
    "description": "<p>ADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time or datetime expression, and expr2 is a time expression. Returns NULL if expr1or expr2 is NULL.</p>\n<pre><code>SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n-&gt; '03:00:01.999997'\n</code></pre>"
  },
  "ascii": {
    "syntax": "ASCII(str)",
    "description": "<p>Returns the numeric value of the leftmost character of the string str. Returns 0 if str is the empty string. Returns NULL if str is NULL ASCII() works for 8-bit characters.</p>\n<pre><code>SELECT ASCII('2');\n-&gt; 50\nSELECT ASCII(2);\n-&gt; 50\nSELECT ASCII('dx');\n-&gt; 100\n</code></pre>"
  },
  "asin": {
    "syntax": "ASIN(X)",
    "description": "<p>Returns the arc sine of X, that is, the value whose sine is X. Returns NULL if X is not in the range -1 to 1, or if X is NULL.</p>"
  },
  "atan": {
    "syntax": "ATAN(X)",
    "description": "<p>Returns the arc tangent of X, that is, the value whose tangent is X. Returns NULL if X is NULL</p>"
  },
  "atan2": {
    "syntax": "ATAN2(Y,X)",
    "description": "<p>Returns the arc tangent of the two variables X and Y. It is similar to calculating the arc tangent of Y / X, except that the signs of both arguments are used to determine the quadrant of the result. Returns NULL if X or Y is NULL.</p>\n<hr />\n<p><strong>Example:</strong></p>\n<pre><code>SELECT ATAN2(PI(),0);\n-&gt; 1.5707963267949\n</code></pre>"
  },
  "bin": {
    "syntax": "BIN(N)",
    "description": "<p>Returns a string representation of the binary value of <code>N</code>, where <code>N</code> is a longlong (BIGINT) number. This is equivalent to CONV(N,10,2) Returns <code>NULL</code> if <code>N</code> is <code>NULL</code>.</p>\n<pre><code>SELECT BIN(12);\n-&gt; '1100'\n</code></pre>"
  },
  "bit_length": {
    "syntax": "BIT_LENGTH(str)",
    "description": "<p>Returns the length of the string str in bits. Returns NULL if str is NULL.</p>\n<pre><code>SELECT BIT_LENGTH('text');\n-&gt; 32\n</code></pre>"
  },
  "ceil": {
    "syntax": "CEIL(X)",
    "description": "<p>Returns the smallest integer value not less than X. Returns NULL if X is NULL.</p>\n<hr />\n<p><strong>Examples:</strong></p>\n<pre><code>SELECT CEIL(1.23);\n-&gt; 2\n\nSELECT CEIL(-1.23);\n-1\n</code></pre>"
  },
  "ceiling": {
    "syntax": "CEILING(X)",
    "description": "<p>Returns the smallest integer value not less than X. Returns NULL if X is NULL.</p>\n<hr />\n<p><strong>Examples:</strong></p>\n<pre><code>SELECT CEILING(1.23);\n-&gt; 2\n\nSELECT CEILING(-1.23);\n-1\n</code></pre>"
  },
  "char": {
    "syntax": "CHAR(N,...[USING charset_name])",
    "description": "<!-- Though build:dialect it not working -->\n<p>CHAR() interprets each argument N as an integer and returns a string consisting of the characters given by the code values of those integers. NULL values are skipped.</p>\n<pre><code>mysql&gt; SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<p>By default, CHAR() returns a binary string. To produce a string in a given character set, use the optional USING clause:</p>\n<pre><code>mysql&gt; SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql&gt; SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<p>If USING is given and the result string is illegal for the given character set, a warning is issued. Also, if strict SQL mode is enabled, the result from CHAR() becomes NULL.</p>\n<p>If CHAR() is invoked from within the mysql client, binary strings display using hexadecimal notation, depending on the value of the --binary-as-hex. For more information about that option, see Section 4.5.1, “mysql — The MySQL Command-Line Client”.</p>\n<p>CHAR() arguments larger than 255 are converted into multiple result bytes. For example, CHAR(256) is equivalent to CHAR(1,0), and CHAR(256*256) is equivalent to CHAR(1,0,0):</p>\n<pre><code>mysql&gt; SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql&gt; SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)\n</code></pre>"
  },
  "char_length": {
    "syntax": "CHAR_LENGTH(str)",
    "description": "<p>Returns the length of the string str, measured in code points. A\nmultibyte character counts as a single code point. This means\nthat, for a string containing two 3-byte characters,\nLENGTH() returns 6, whereas CHAR_LENGTH() returns 2, as shown here:</p>\n<pre><code>mysql&gt; SET @dolphin:='海豚';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<p>CHAR_LENGTH() returns NULL if str is NULL.</p>"
  },
  "character_length": {
    "syntax": "CHARACTER_LENGTH(str)",
    "description": "<p>CHARACTER<em>LENGTH() is a synonym for CHAR</em>LENGTH().</p>"
  },
  "concat": {
    "syntax": "CONCAT(str1,str2,...)",
    "description": "<p>Returns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are nonbinary strings, the result is a nonbinary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent nonbinary string form.</p>\n<p>CONCAT() returns NULL if any argument is NULL.</p>\n<pre><code>mysql&gt; SELECT CONCAT('My', 'S', 'QL');\n        -&gt; 'MySQL'\nmysql&gt; SELECT CONCAT('My', NULL, 'QL');\n        -&gt; NULL\nmysql&gt; SELECT CONCAT(14.3);\n        -&gt; '14.3', mysql&gt; SELECT 'My' 'S' 'QL';\n        -&gt; 'MySQL'\n</code></pre>\n<p>For quoted strings, concatenation can be performed by placing the strings next to each other:</p>\n<pre><code>mysql&gt; SELECT 'My' 'S' 'QL';\n-&gt; 'MySQL'\n</code></pre>\n<p>If CONCAT() is invoked from within the mysql client, binary string results display using hexadecimal notation, depending on the value of the --binary-as-hex. For more information about that option, see Section&nbsp;4.5.1, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql.html\">mysql — The MySQL Command-Line Client</a>.</p>"
  },
  "concat_ws": {
    "syntax": "CONCAT_WS(separator,str1,str2,...)",
    "description": "<p>CONCAT_WS() stands for Concatenate With Separator and is a special form of CONCAT(). The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments. If the separator is NULL, the result is NULL.</p>\n<pre><code>mysql&gt; SELECT CONCAT_WS(',','First name','Second name','Last Name');\n        -&gt; 'First name,Second name,Last Name'\nmysql&gt; SELECT CONCAT_WS(',','First name',NULL,'Last Name');\n        -&gt; 'First name,Last Name'\n</code></pre>\n<p>CONCAT_WS() does not skip empty strings. However, it does skip any NULL values after the separator argument.</p>"
  },
  "conv": {
    "syntax": "CONV(N,from_base,to_base)",
    "description": "<p>Converts numbers between different number bases. Returns a string representation of the number N, converted from base from<em>base to base to</em>base. Returns NULL if any argument is NULL.</p>\n<hr />\n<p><strong>Examples:</strong></p>\n<pre><code>SELECT CONV('a',16,2);\n-&gt; '1010'\n\nSELECT CONV('6E',18,8);\n-&gt; '172'\n</code></pre>"
  },
  "convert_tz": {
    "syntax": "CONVERT_TZ(dt,from_tz,to_tz)",
    "description": "<p>CONVERT<em>TZ() converts a datetime value dt from the time zone given by from</em>tz to the time zone given by to_tz and returns the resulting value. </p>\n<pre><code>SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n-&gt; '2004-01-01 13:00:00'\nSELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n-&gt; '2004-01-01 22:00:00'\n</code></pre>"
  },
  "cos": {
    "syntax": "COS(X)",
    "description": "<p>Returns the cosine of X, where X is given in radians. Returns NULL if X is NULL.</p>"
  },
  "cot": {
    "syntax": "COT(X)",
    "description": "<p>Returns the cotangent of X. Returns NULL if X is NULL.</p>"
  },
  "crc32": {
    "syntax": "CRC32(expr)",
    "description": "<p>Computes a cyclic redundancy check value and returns a 32-bit unsigned value. The result is NULL if the argument is NULL. The argument is expected to be a string and (if possible) is treated as one if it is not.</p>\n<hr />\n<p><strong>Examples:</strong></p>\n<pre><code>SELECT CRC32('MySQL');\n-&gt; 3259397556\n</code></pre>"
  },
  "curdate": {
    "syntax": "CURDATE()",
    "description": "<p>Returns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD format, depending on whether the function is used in string or numeric context.</p>\n<pre><code>SELECT CURDATE();\n-&gt; '2008-06-13'\n\nSELECT CURDATE() + 0;\n-&gt; 20080613\n</code></pre>"
  },
  "current_date": {
    "syntax": "CURRENT_DATE()",
    "description": "<p>Returns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD format, depending on whether the function is used in string or numeric context.</p>\n<pre><code>SELECT CURRENT_DATE();\n-&gt; '2008-06-13'\n\nSELECT CURRENT_DATE() + 0;\n-&gt; 20080613\n</code></pre>"
  },
  "current_time": {
    "syntax": "CURRENT_TIME([fsp])",
    "description": "<p>Returns the current time as a value in 'hh:mm:ss' or hhmmss format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone.</p>\n<p>If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.</p>\n<pre><code>SELECT CURRENT_TIME();\n-&gt; 19:25:37\n\nSELECT CURRENT_TIME(3);\n-&gt; 19:25:37.840\n</code></pre>"
  },
  "curtime": {
    "syntax": "CURTIME([fsp])",
    "description": "<p>Returns the current time as a value in 'hh:mm:ss' or hhmmss format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone.</p>\n<p>If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.</p>\n<pre><code>SELECT CURTIME();\n-&gt; 19:25:37\n\nSELECT CURTIME(3);\n-&gt; 19:25:37.840\n</code></pre>"
  },
  "date": {
    "syntax": "DATE(expr)",
    "description": "<p>Extracts the date part of the date or datetime expression expr. Returns NULL if expr is NULL.</p>\n<pre><code>SELECT DATE('2003-12-31 01:02:03');\n-&gt; '2003-12-31'\n</code></pre>"
  },
  "date_add": {
    "syntax": "DATE_ADD(date,INTERVAL expr unit)",
    "description": "<p>These functions perform date arithmetic. The date argument specifies the starting date or datetime value. expr is an expression specifying the interval value to be added or subtracted from the starting date. expr is evaluated as a string; it may start with a - for negative intervals. unit is a keyword indicating the units in which the expression should be interpreted.</p>\n<pre><code>SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n-&gt; '2018-05-02'\n</code></pre>"
  },
  "date_format": {
    "syntax": "DATE_FORMAT(date,format)",
    "description": "<p>Formats the date value according to the format string. If either argument is NULL, the function returns NULL.</p>\n<pre><code>SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n-&gt; 'Sunday October 2009'\n\nSELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n-&gt; '22:23:00'\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Specifier</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>Abbreviated weekday name (Sun..Sat)</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>Abbreviated month name (Jan..Dec)</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>Month, numeric (0..12)</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>Day of the month with English suffix (0th, 1st, 2nd, 3rd, …)</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>Day of the month, numeric (00..31)</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>Day of the month, numeric (0..31)</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>Microseconds (000000..999999)</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>Hour (00..23)</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Hour (01..12)</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>Hour (01..12)</td>\n</tr>\n<tr>\n<td>%i</td>\n<td>Minutes, numeric (00..59)</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>Day of year (001..366)</td>\n</tr>\n<tr>\n<td>%k</td>\n<td>Hour (0..23)</td>\n</tr>\n<tr>\n<td>%l</td>\n<td>Hour (1..12)</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>Month name (January..December)</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>Month, numeric (00..12)</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>AM or PM</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>Time, 12-hour (hh:mm:ss followed by AM or PM)</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>Seconds (00..59)</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>Seconds (00..59)</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>Time, 24-hour (hh:mm:ss)</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>Week (00..53), where Sunday is the first day of the week; WEEK() mode 0</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>Week (00..53), where Monday is the first day of the week; WEEK() mode 1</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>Week (01..53), where Sunday is the first day of the week; WEEK() mode 2; used with %X</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>Week (01..53), where Monday is the first day of the week; WEEK() mode 3; used with %x</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>Weekday name (Sunday..Saturday)</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>Day of the week (0=Sunday..6=Saturday)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>Year for the week where Sunday is the first day of the week, numeric, four digits; used with %V</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>Year for the week, where Monday is the first day of the week, numeric, four digits; used with %v</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>Year, numeric, four digits</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>Year, numeric (two digits)</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>A literal % character</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>x, for any “x” not listed above</td>\n</tr>\n</tbody>\n</table>"
  },
  "date_sub": {
    "syntax": "DATE_SUB(date,INTERVAL expr unit)",
    "description": "<p>These functions perform date arithmetic. The date argument specifies the starting date or datetime value. expr is an expression specifying the interval value to be added or subtracted from the starting date. expr is evaluated as a string; it may start with a - for negative intervals. unit is a keyword indicating the units in which the expression should be interpreted.</p>\n<pre><code>SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n-&gt; '2017-05-01'\n</code></pre>"
  },
  "datediff": {
    "syntax": "DATEDIFF(expr1,expr2)",
    "description": "<p>DATEDIFF() returns expr1 − expr2 expressed as a value in days from one date to the other. expr1 and expr2 are date or date-and-time expressions. Only the date parts of the values are used in the calculation.</p>\n<pre><code>SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n-&gt; 1\n\nSELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n-&gt; -31\n</code></pre>\n<p>This function returns NULL if expr1 or expr2 is NULL.</p>"
  },
  "day": {
    "syntax": "DAY(date)",
    "description": "<p>Returns the day of the month for date, in the range 1 to 31, or 0 for dates such as '0000-00-00' or '2008-00-00' that have a zero day part. Returns NULL if date is NULL.</p>\n<pre><code>SELECT DAY('2007-02-03');\n-&gt; 3\n</code></pre>"
  },
  "dayofmonth": {
    "syntax": "DAYOFMONTH(date)",
    "description": "<p>Returns the day of the month for date, in the range 1 to 31, or 0 for dates such as '0000-00-00' or '2008-00-00' that have a zero day part. Returns NULL if date is NULL.</p>\n<pre><code>SELECT DAYOFMONTH('2007-02-03');\n-&gt; 3\n</code></pre>"
  },
  "dayofweek": {
    "syntax": "DAYOFWEEK(date)",
    "description": "<p>Returns the weekday index for date (1 = Sunday, 2 = Monday, …, 7 = Saturday). These index values correspond to the ODBC standard. Returns NULL if date is NULL.</p>\n<pre><code>SELECT DAYOFWEEK('2007-02-03');\n-&gt; 7\n</code></pre>"
  },
  "dayofyear": {
    "syntax": "DAYOFYEAR(date)",
    "description": "<p>Returns the day of the year for date, in the range 1 to 366. Returns NULL if date is NULL.</p>\n<hr />\n<p><strong>Examples</strong></p>\n<pre><code>SELECT DAYOFYEAR('2007-02-03');\n</code></pre>"
  },
  "degrees": {
    "syntax": "DEGREES(X)",
    "description": "<p>Returns the argument X, converted from radians to degrees. Returns NULL if X is NULL.</p>\n<pre><code>SELECT DEGREES(PI());\n-&gt; 180\n\nSELECT DEGREES(PI() / 2);\n-&gt; 90\n</code></pre>"
  },
  "elt": {
    "syntax": "ELT(N,str1,str2,str3,...)",
    "description": "<p>ELT() returns the Nth element of the list of strings: str1 if N = 1, str2 if N = 2, and so on. Returns NULL if N is less than 1, greater than the number of arguments, or  NULL. ELT() is the complement of FIELD().</p>\n<pre><code>mysql&gt; SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -&gt; 'Aa'\nmysql&gt; SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -&gt; 'Dd'\n</code></pre>"
  },
  "exp": {
    "syntax": "EXP(X)",
    "description": "<p>Returns the value of e (the base of natural logarithms) raised to the power of X. If X is NULL, this function returns NULL.</p>\n<pre><code>SELECT EXP(2);\n-&gt; 7.3890560989307\n</code></pre>"
  },
  "export_set": {
    "syntax": "EXPORT_SET(bits,on,off[,separator[,number_of_bits]])",
    "description": "<p>Returns a string such that for every bit set in the value bits, you get an on string and for every bit not set in the value, you get an off string. Bits in bits are examined from right to left (from low-order to high-order bits). Strings are added to the result from left to right, separated by the separator string (the default being the comma character ,). The number of bits examined is given by number<em>of</em>bits, which has a default of 64 if not specified. number<em>of</em>bits is silently clipped to 64 if larger than 64. It is treated as an unsigned integer, so a value of −1 is effectively the same as 64.</p>\n<pre><code>mysql&gt; SELECT EXPORT_SET(5,'Y','N',',',4);\n        -&gt; 'Y,N,Y,N'\nmysql&gt; SELECT EXPORT_SET(6,'1','0',',',10);\n        -&gt; '0,1,1,0,0,0,0,0,0,0'\n</code></pre>"
  },
  "extract": {
    "syntax": "EXTRACT(unit FROM date)",
    "description": "<p>The EXTRACT() function uses the same kinds of unit specifiers as DATE<em>ADD() or DATE</em>SUB(), but extracts parts from the date rather than performing date arithmetic. For information on the unit argument, see Temporal Intervals. Returns NULL if date is NULL.</p>\n<p><strong>Examples</strong></p>\n<pre><code>SELECT EXTRACT(YEAR FROM '2019-07-02');\nSELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\nSELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n</code></pre>"
  },
  "field": {
    "syntax": "FIELD(str,str1,str2,str3,...)",
    "description": "<p>Returns the index (position) of str in the str1, str2, str3, … list. Returns 0 if str is not found. ,If all arguments to FIELD() are strings, all arguments are compared as strings. If all arguments are numbers, they are compared as numbers. Otherwise, the arguments are compared as double. </p>\n<pre><code>mysql&gt; SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -&gt; 2\nmysql&gt; SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -&gt; 0\n</code></pre>\n<p>If str is NULL, the return value is 0 because NULL fails equality comparison with any value. FIELD() is the complement of ELT().</p>"
  },
  "find_in_set": {
    "syntax": "FIND_IN_SET(str,strlist)",
    "description": "<p>Returns a value in the range of 1 to N if the string str is in the string list <code>strlist</code> consisting of N substrings. A string list is a string composed of substrings separated by characters. If the first argument is a constant string and the second is a column of type SET, the FIND<em>IN</em>SET() function is optimized to use bit arithmetic. Returns 0 if str is not in <code>strlist</code> or if <code>strlist</code> is the empty string. Returns NULL if either argument is NULL. This function does not work properly if the first argument contains a comma (,) character.</p>\n<pre><code>mysql&gt; SELECT FIND_IN_SET('b','a,b,c,d');\n        -&gt; 2\n</code></pre>"
  },
  "floor": {
    "syntax": "FLOOR(X)",
    "description": "<p>Returns the largest integer value not greater than X. Returns NULL if X is NULL.</p>\n<pre><code>SELECT FLOOR(1.23), FLOOR(-1.23);\n-&gt; 1, -2\n</code></pre>"
  },
  "format": {
    "syntax": "FORMAT(X,D[,locale])",
    "description": "<p>Formats the number X to a format like '#,###,###.##', rounded to D decimal places, and returns the result as a string.</p>\n<p>If D is 0, the result has no decimal point or fractional part. If X or D is NULL, the function returns NULL.</p>\n<pre><code>SELECT FORMAT(12332.123456, 4);\n-&gt; '12,332.1235'\n\nSELECT FORMAT(12332.1,4);\n-&gt; '12,332.1000'\n\nSELECT FORMAT(12332.2,0);\n-&gt; '12,332'\n\nSELECT FORMAT(12332.2,2,'de_DE');\n-&gt; '12.332,20'\n</code></pre>"
  },
  "from_base64": {
    "syntax": "FROM_BASE64(str)",
    "description": "<p>Takes a string encoded with the base-64 encoded rules used by TO<em>BASE64() and returns the decoded result as a binary string. The result is NULL if the argument is NULL or not a valid base-64 string. See the description of TO</em>BASE64() for details about the encoding and decoding rules.</p>\n<pre><code>mysql&gt; SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));\n        -&gt; 'JWJj', 'abc'\n</code></pre>\n<p>If FROM_BASE64() is invoked from within the mysql client, binary strings display using hexadecimal notation. You can disable this behavior by setting the value of the --binary-as-hex to 0 when starting the mysql client. For more information about that option, see Section&nbsp;4.5.1, “mysql — The MySQL Command-Line Client”.</p>"
  },
  "from_days": {
    "syntax": "FROM_DAYS(N)",
    "description": "<p>Given a day number N, returns a DATE value. Returns NULL if N is NULL.</p>\n<pre><code>SELECT FROM_DAYS(730669);\n-&gt; '2000-07-03'\n</code></pre>"
  },
  "from_unixtime": {
    "syntax": "FROM_UNIXTIME(unix_timestamp[,format])",
    "description": "<p>Returns a representation of unix_timestamp as a datetime or character string value. The value returned is expressed using the session time zone.</p>\n<p>If format is omitted, this function returns a DATETIME value.</p>\n<pre><code>SELECT FROM_UNIXTIME(1447430881);\n-&gt; '2015-11-13 10:08:01'\n\nSELECT FROM_UNIXTIME(1447430881,'%Y %D %M %h:%i:%s %x');\n-&gt; '2015 13th November 10:08:01 2015'\n</code></pre>"
  },
  "get_format": {
    "syntax": "GET_FORMAT({DATE|TIME|DATETIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})",
    "description": "<p>Returns a format string. This function is useful in combination with the DATE<em>FORMAT() and the STR</em>TO_DATE() functions.</p>\n<p>If format is NULL, this function returns NULL.</p>\n<pre><code>SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n-&gt; '03.10.2003'\n\nSELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n-&gt; '2003-10-31'\n</code></pre>"
  },
  "hex": {
    "syntax": "HEX(str), HEX(N)",
    "description": "<p>For a string argument str, HEX() returns a hexadecimal string representation of str where each byte of each character in str is converted to two hexadecimal digits.</p>\n<p>For a numeric argument N, HEX() returns a hexadecimal string representation of the value of N treated as a longlong (BIGINT) number.</p>\n<pre><code>SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n-&gt; 'abc', 616263, 'abc'\n\nSELECT HEX(255), CONV(HEX(255),16,10);\n-&gt; 'FF', 255\n</code></pre>"
  },
  "hour": {
    "syntax": "HOUR(time)",
    "description": "<p>Returns the hour for time. The range of the return value is 0 to 23 for time-of-day values. However, the range of TIME values actually is much larger, so HOUR can return values greater than 23. Returns NULL if time is NULL.</p>\n<pre><code>SELECT HOUR('10:05:03');\n-&gt; 10\n\nSELECT HOUR('272:59:59');\n-&gt; 272\n</code></pre>"
  },
  "insert": {
    "syntax": "INSERT(str,pos,len,newstr)",
    "description": "<p>Returns the string str, with the substring beginning at position pos and <code>len</code> characters long replaced by the string <code>newstr</code>. Returns the original string if pos is not within the length of the string. Replaces the rest of the string from position pos if <code>len</code> is not within the length of the rest of the string. Returns <code>NULL</code> if any argument is <code>NULL</code>.</p>\n<pre><code>mysql&gt; SELECT INSERT('Quadratic', 3, 4, 'What');\n        -&gt; 'QuWhattic'\nmysql&gt; SELECT INSERT('Quadratic', -1, 4, 'What');\n        -&gt; 'Quadratic'\nmysql&gt; SELECT INSERT('Quadratic', 3, 100, 'What');\n        -&gt; 'QuWhat'\n</code></pre>\n<p>This function is multibyte safe.</p>"
  },
  "instr": {
    "syntax": "INSTR(str,substr)",
    "description": "<p>Returns the position of the first occurrence of substring substr in string str. This is the same as the two-argument form of LOCATE(), except that the order of the arguments is reversed.</p>\n<pre><code>mysql&gt; SELECT INSTR('foobarbar', 'bar');\n        -&gt; 4\nmysql&gt; SELECT INSTR('xbar', 'foobar');\n        -&gt; 0\n</code></pre>\n<p>This function is multibyte safe, and is case-sensitive only if at least one argument is a binary string. If either argument is NULL, this functions returns NULL.</p>"
  },
  "json_array": {
    "syntax": "JSON_ARRAY([val[, val] ...])",
    "description": "<p>Evaluates a (possibly empty) list of values and returns a JSON array containing those values.</p>\n<pre><code>mysql&gt; SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+\n</code></pre>"
  },
  "json_array_append": {
    "syntax": "JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)",
    "description": "<p>Appends values to the end of the indicated arrays within a JSON document and returns the result. Returns NULL if any argument is NULL. An error occurs if the json_doc argument is not a valid JSON document or any path argument is not a valid path expression or contains a * or ** wildcard.</p>\n<p>The path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.</p>\n<p>If a path selects a scalar or object value, that value is autowrapped within an array and the new value is added to that array. Pairs for which the path does not identify any value in the JSON document are ignored.</p>\n<pre><code>mysql&gt; SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql&gt; SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql&gt; SET @j = '{\"a\": 1}';\nmysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+\n</code></pre>\n<p>In MySQL 5.7, this function was named JSON_APPEND(). That name is no longer supported in MySQL 8.0.</p>"
  },
  "json_array_insert": {
    "syntax": "JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)",
    "description": "<p>Updates a JSON document, inserting into an array within the document and returning the modified document. Returns NULL if any argument is NULL. An error occurs if the json_doc argument is not a valid JSON document or any path argument is not a valid path expression or contains a * or ** wildcard or does not end with an array element identifier.</p>\n<p>The path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.</p>\n<p>Pairs for which the path does not identify any array in the JSON document are ignored. If a path identifies an array element, the corresponding value is inserted at that element position, shifting any following values to the right. If a path identifies an array position past the end of an array, the value is inserted at the end of the array.</p>\n<pre><code>mysql&gt; SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+\n</code></pre>\n<p>Earlier modifications affect the positions of the following elements in the array, so subsequent paths in the same <code>JSON_ARRAY_INSERT()</code> call should take this into account. In the final example, the second path inserts nothing because the path no longer matches anything after the first insert.</p>"
  },
  "json_contains": {
    "syntax": "JSON_CONTAINS(target, candidate[, path])",
    "description": "<p>Indicates by returning 1 or 0 whether a given candidate JSON document is contained within a target JSON document, or—if a path argument was supplied—whether the candidate is found at a specific path within the target. Returns NULL if any argument is NULL, or if the path argument does not identify a section of the target document. An error occurs if target or candidate is not a valid JSON document, or if the path argument is not a valid path expression or contains a * or ** wildcard.</p>\n<p>To check only whether any data exists at the path, use <code>JSON_CONTAINS_PATH()</code> instead.</p>\n<p>The following rules define containment:</p>\n<ul>\n<li>A candidate scalar is contained in a target scalar if and only if they are comparable and are equal. Two scalar values are comparable if they have the same <code>JSON_TYPE()</code> types, with the exception that values of types <code>INTEGER</code> and <code>DECIMAL</code> are also comparable to each other.</li>\n<li>A candidate array is contained in a target array if and only if every element in the candidate is contained in some element of the target.</li>\n<li>A candidate nonarray is contained in a target array if and only if the candidate is contained in some element of the target.</li>\n<li>A candidate object is contained in a target object if and only if for each key in the candidate there is a key with the same name in the target and the value associated with the candidate key is contained in the value associated with the target key.</li>\n</ul>\n<p>Otherwise, the candidate value is not contained in the target document.</p>\n<p>Starting with MySQL 8.0.17, queries using JSON_CONTAINS() on <code>InnoDB</code> tables can be optimized using multi-valued indexes; see <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-multi-valued\">Multi-Valued Indexes</a>, for more information.</p>\n<pre><code>mysql&gt; SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql&gt; SET @j2 = '1';\nmysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql&gt; SET @j2 = '{\"d\": 4}';\nmysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\n</code></pre>"
  },
  "json_contains_path": {
    "syntax": "JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)",
    "description": "<p>Returns 0 or 1 to indicate whether a JSON document contains data at a given path or paths. Returns NULL if any argument is NULL. An error occurs if the json<em>doc argument is not a valid JSON document, any path argument is not a valid path expression, or one</em>or_all is not 'one' or 'all'.</p>\n<p>To check for a specific value at a path, use JSON_CONTAINS() instead.</p>\n<p>The return value is 0 if no specified path exists within the document. Otherwise, the return value depends on the one<em>or</em>all argument:</p>\n<ul>\n<li><code>'one'</code>: 1 if at least one path exists within the document, 0 otherwise.</li>\n<li><code>'all'</code>: 1 if all paths exist within the document, 0 otherwise.</li>\n</ul>\n<pre><code>mysql&gt; SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+\n</code></pre>"
  },
  "json_depth": {
    "syntax": "JSON_DEPTH(json_doc)",
    "description": "<p>Returns the maximum depth of a JSON document. Returns NULL if the argument is NULL. An error occurs if the argument is not a valid JSON document.</p>\n<p>An empty array, empty object, or scalar value has depth 1. A nonempty array containing only elements of depth 1 or nonempty object containing only member values of depth 1 has depth 2. Otherwise, a JSON document has depth greater than 2.</p>\n<pre><code>mysql&gt; SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql&gt; SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql&gt; SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+\n</code></pre>"
  },
  "json_extract": {
    "syntax": "JSON_EXTRACT(json_doc, path[, path] ...)",
    "description": "<p>Returns data from a JSON document, selected from the parts of the document matched by the path arguments. Returns NULL if any argument is NULL or no paths locate a value in the document. An error occurs if the json_doc argument is not a valid JSON document or any path argument is not a valid path expression.</p>\n<p>The return value consists of all values matched by the path arguments. If it is possible that those arguments could return multiple values, the matched values are autowrapped as an array, in the order corresponding to the paths that produced them. Otherwise, the return value is the single matched value.</p>\n<pre><code>mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+\n</code></pre>\n<p>MySQL supports the -&gt; operator as shorthand for this function as used with 2 arguments where the left hand side is a JSON column identifier (not an expression) and the right hand side is the JSON path to be matched within the column.</p>"
  },
  "json_insert": {
    "syntax": "JSON_INSERT(json_doc, path, val[, path, val] ...)",
    "description": "<p>Inserts data into a JSON document and returns the result. Returns NULL if any argument is NULL. An error occurs if the json_doc argument is not a valid JSON document or any path argument is not a valid path expression or contains a * or ** wildcard.</p>\n<p>The path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.</p>\n<p>A path-value pair for an existing path in the document is ignored and does not overwrite the existing document value. A path-value pair for a nonexisting path in the document adds the value to the document if the path identifies one of these types of values:</p>\n<ul>\n<li>A member not present in an existing object. The member is added to the object and associated with the new value.</li>\n<li>A position past the end of an existing array. The array is extended with the new value. If the existing value is not an array, it is autowrapped as an array, then extended with the new value.</li>\n</ul>\n<p>Otherwise, a path-value pair for a nonexisting path in the document is ignored and has no effect.</p>\n<p>For a comparison of <code>JSON_INSERT()</code>, <code>JSON_REPLACE()</code>, and <code>JSON_SET()</code>, see the discussion of <code>JSON_SET()</code>.</p>\n<pre><code>mysql&gt; SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\n</code></pre>\n<p>The third and final value listed in the result is a quoted string and not an array like the second one (which is not quoted in the output); no casting of values to the JSON type is performed. To insert the array as an array, you must perform such casts explicitly, as shown here:</p>\n<pre><code>mysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)\n</code></pre>"
  },
  "json_keys": {
    "syntax": "JSON_KEYS(json_doc[, path])",
    "description": "<p>Returns the keys from the top-level value of a JSON object as a JSON array, or, if a path argument is given, the top-level keys from the selected path. Returns NULL if any argument is NULL, the json<em>doc argument is not an object, or path, if given, does not locate an object. An error occurs if the json</em>doc argument is not a valid JSON document or the path argument is not a valid path expression or contains a * or ** wildcard.</p>\n<p>The result array is empty if the selected object is empty. If the top-level value has nested subobjects, the return value does not include keys from those subobjects.</p>\n<pre><code>mysql&gt; SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql&gt; SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+\n</code></pre>"
  },
  "json_object": {
    "syntax": "JSON_OBJECT([key, val[, key, val] ...])",
    "description": "<p>Evaluates a (possibly empty) list of key-value pairs and returns a JSON object containing those pairs. An error occurs if any key name is NULL or the number of arguments is odd.</p>\n<pre><code>mysql&gt; SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+\n</code></pre>"
  },
  "json_quote": {
    "syntax": "JSON_QUOTE(string)",
    "description": "<p>Quotes a string as a JSON value by wrapping it with double quote characters and escaping interior quote and other characters, then returning the result as a utf8mb4 string. Returns NULL if the argument is NULL.</p>\n<p>This function is typically used to produce a valid JSON string literal for inclusion within a JSON document.</p>\n<p>Certain special characters are escaped with backslashes per the escape sequences shown in <a href=\"https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html#json-unquote-character-escape-sequences\">Table 12.23, “JSON_UNQUOTE() Special Character Escape Sequences”</a>.</p>\n<pre><code>mysql&gt; SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\nmysql&gt; SELECT JSON_QUOTE('[1, 2, 3]');\n+-------------------------+\n| JSON_QUOTE('[1, 2, 3]') |\n+-------------------------+\n| \"[1, 2, 3]\"             |\n+-------------------------+\n</code></pre>\n<p>You can also obtain JSON values by casting values of other types to the JSON type using CAST(value AS JSON); <a href=\"https://dev.mysql.com/doc/refman/8.0/en/json.html#json-converting-between-types\">see Converting between JSON and non-JSON values</a>, for more information.</p>\n<p>Two aggregate functions generating JSON values are available. JSON<em>ARRAYAGG() returns a result set as a single JSON array, and JSON</em>OBJECTAGG() returns a result set as a single JSON object. For more information, see Section 12.19, “Aggregate Functions”.</p>\n<p>Two aggregate functions generating JSON values are available. JSON<em>ARRAYAGG() returns a result set as a single JSON array, and JSON</em>OBJECTAGG() returns a result set as a single JSON object. For more information, see <a href=\"https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions-and-modifiers.html\">Section 12.19, “Aggregate Functions”</a>.</p>"
  },
  "last_day": {
    "syntax": "LAST_DAY(date)",
    "description": "<p>Takes a date or datetime value and returns the corresponding value for the last day of the month. Returns NULL if the argument is invalid or NULL.</p>\n<pre><code>SELECT LAST_DAY('2003-02-05');\n-&gt; '2003-02-28'\n\nSELECT LAST_DAY('2004-02-05');\n-&gt; '2004-02-29'\n\nSELECT LAST_DAY('2004-01-01 01:01:01');\n-&gt; '2004-01-31'\n\nSELECT LAST_DAY('2003-03-32');\n-&gt; NULL\n</code></pre>"
  },
  "lcase": {
    "syntax": "LCASE(str)",
    "description": "<p>LCASE() is a synonym for LOWER().</p>\n<p>LCASE() used in a view is rewritten as LOWER() when storing the view's definition. (Bug #12844279)</p>"
  },
  "left": {
    "syntax": "LEFT(str,len)",
    "description": "<p>Returns the leftmost len characters from the string str, or NULL if any argument is NULL.</p>\n<pre><code>mysql&gt; SELECT LEFT('foobarbar', 5);\n        -&gt; 'fooba'\n</code></pre>\n<p>This function is multibyte safe.</p>"
  },
  "length": {
    "syntax": "LENGTH(str)",
    "description": "<p>Returns the length of the string str, measured in bytes. A multibyte character counts as multiple bytes. This means that for a string containing five 2-byte characters, LENGTH() returns 10, whereas CHAR_LENGTH() returns 1. Returns NULL if str is NULL.</p>\n<pre><code>mysql&gt; SELECT LENGTH('text');\n        -&gt; 4\n</code></pre>\n<p>Note : The Length() OpenGIS spatial function is named ST_Length() in MySQL.</p>"
  },
  "ln": {
    "syntax": "LN(X)",
    "description": "<p>Returns the natural logarithm of X; that is, the base-e logarithm of X. If X is less than or equal to 0.0E0, the function returns NULL and a warning “Invalid argument for logarithm” is reported. Returns NULL if X is NULL</p>\n<pre><code>SELECT LN(2);\n-&gt; 0.69314718055995\n\nSELECT LN(-2);\n-&gt; NULL\n</code></pre>"
  },
  "load_file": {
    "syntax": "LOAD_FILE(file_name)",
    "description": "<p>Reads the file and returns the file contents as a string. To use this function, the file must be located on the server host, you must specify the full path name to the file, and you must have the FILE privilege. The file must be readable by the server and its size less than max<em>allowed</em>packet bytes. If the secure<em>file</em>priv system variable is set to a nonempty directory name, the file to be loaded must be located in that directory. (Prior to MySQL 8.0.17, the file must be readable by all, not just readable by the server.)</p>\n<p>If the file does not exist or cannot be read because one of the preceding conditions is not satisfied, the function returns NULL.</p>\n<p>The character<em>set</em>filesystem system variable controls interpretation of file names that are given as literal strings.</p>\n<pre><code>mysql&gt; UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;\n</code></pre>"
  },
  "locate": {
    "syntax": "LOCATE(substr,str), LOCATE(substr,str,pos)",
    "description": "<p>The first syntax returns the position of the first occurrence of substring <code>substr</code> in string str. The second syntax returns the position of the first occurrence of substring <code>substr</code> in string str, starting at position pos. Returns 0 if <code>substr</code> is not in str. Returns NULL if any argument is <code>NULL</code>.</p>\n<pre><code>mysql&gt; SELECT LOCATE('bar', 'foobarbar');\n        -&gt; 4\nmysql&gt; SELECT LOCATE('xbar', 'foobar');\n        -&gt; 0\nmysql&gt; SELECT LOCATE('bar', 'foobarbar', 5);\n        -&gt; 7\n</code></pre>\n<p>This function is multibyte safe, and is case-sensitive only if at least one argument is a binary string</p>"
  },
  "log": {
    "syntax": "LOG(X), LOG(B,X)",
    "description": "<p>If called with one parameter, this function returns the natural logarithm of X. If X is less than or equal to 0.0E0, the function returns NULL and a warning “Invalid argument for logarithm” is reported. Returns NULL if X or B is NULL.</p>\n<pre><code>SELECT LOG(2);\n-&gt; 0.69314718055995\n\nSELECT LOG(-2);\n-&gt; NULL\n</code></pre>\n<p>If called with two parameters, this function returns the logarithm of X to the base B. If X is less than or equal to 0, or if B is less than or equal to 1, then NULL is returned.</p>\n<pre><code>SELECT LOG(2, 65536);\n-&gt; 16\n</code></pre>"
  },
  "log10": {
    "syntax": "LOG10(X)",
    "description": "<p>Returns the base-10 logarithm of X. If X is less than or equal to 0.0E0, the function returns NULL and a warning “Invalid argument for logarithm” is reported. Returns NULL if X is NULL.</p>\n<p>SELECT LOG10(2);\n-&gt; 0.30102999566398</p>"
  },
  "log2": {
    "syntax": "LOG2(X)",
    "description": "<p>Returns the base-2 logarithm of X. If X is less than or equal to 0.0E0, the function returns NULL and a warning “Invalid argument for logarithm” is reported. Returns NULL if X is NULL.</p>\n<pre><code>SELECT LOG2(65536);\n-&gt; 16\n</code></pre>"
  },
  "lower": {
    "syntax": "LOWER(str)",
    "description": "<p>Returns the string str with all characters changed to lowercase according to the current character set mapping, or NULL if str is NULL. The default character set is utf8mb4.</p>\n<pre><code>mysql&gt; SELECT LOWER('QUADRATICALLY');\n        -&gt; 'quadratically'\n</code></pre>\n<p>LOWER() (and UPPER()) are ineffective when applied to binary strings (BINARY, VARBINARY, BLOB). To perform lettercase conversion of a binary string, first convert it to a nonbinary string using a character set appropriate for the data stored in the string:</p>\n<pre><code>mysql&gt; SET @str = BINARY 'New York';\nmysql&gt; SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+\n</code></pre>\n<p>For collations of Unicode character sets, LOWER() and UPPER() work according to the Unicode Collation Algorithm (UCA) version in the collation name, if there is one, and UCA 4.0.0 if no version is specified. For example, utf8mb4<em>0900</em>ai<em>ci and utf8mb3</em>unicode<em>520</em>ci work according to UCA 9.0.0 and 5.2.0, respectively, whereas utf8mb3<em>unicode</em>ci works according to UCA 4.0.0. See Section 10.10.1, “Unicode Character Sets”.</p>\n<p>This function is multibyte safe.</p>\n<p>LCASE() used within views is rewritten as LOWER().</p>"
  },
  "lpad": {
    "syntax": "LPAD(str,len,padstr)",
    "description": "<p>Returns the string str, left-padded with the string <code>padstr</code> to a length of <code>len</code> characters. If str is longer than <code>len</code>, the return value is shortened to <code>len</code> characters.</p>\n<pre><code>mysql&gt; SELECT LPAD('hi',4,'??');\n        -&gt; '??hi'\nmysql&gt; SELECT LPAD('hi',1,'??');\n        -&gt; 'h'\n</code></pre>\n<p>Returns NULL if any of its arguments are NULL.</p>"
  },
  "ltrim": {
    "syntax": "LTRIM(str)",
    "description": "<p>Returns the string str with leading space characters removed. Returns NULL if str is NULL. his function is multibyte safe.</p>\n<pre><code>mysql&gt; SELECT LTRIM('  barbar');\n        -&gt; 'barbar'\n</code></pre>"
  },
  "make_set": {
    "syntax": "MAKE_SET(bits,str1,str2,...)",
    "description": "<p>Returns a set value (a string containing substrings separated by , characters) consisting of the strings that have the corresponding bit in bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL values in str1, str2, … are not appended to the result.</p>\n<pre><code>mysql&gt; SELECT MAKE_SET(1,'a','b','c');\n        -&gt; 'a'\nmysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -&gt; 'hello,world'\nmysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -&gt; 'hello'\nmysql&gt; SELECT MAKE_SET(0,'a','b','c');\n        -&gt; ''\n</code></pre>"
  },
  "makedate": {
    "syntax": "MAKEDATE(year,dayofyear)",
    "description": "<p>Returns a date, given year and day-of-year values. dayofyear must be greater than 0 or the result is NULL. The result is also NULL if either argument is NULL.</p>\n<pre><code>SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n-&gt; '2011-01-31', '2011-02-01'\n\nSELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n-&gt; '2011-12-31', '2014-12-31'\n\nSELECT MAKEDATE(2011,0);\n-&gt; NULL\n</code></pre>"
  },
  "maketime": {
    "syntax": "MAKETIME(hour,minute,second)",
    "description": "<p>Returns a time value calculated from the hour, minute, and second arguments. Returns NULL if any of its arguments are NULL.</p>\n<p>The second argument can have a fractional part.</p>\n<pre><code>SELECT MAKETIME(12,15,30);\n-&gt; '12:15:30'\n</code></pre>"
  },
  "microsecond": {
    "syntax": "MICROSECOND(expr)",
    "description": "<p>Returns the microseconds from the time or datetime expression expr as a number in the range from 0 to 999999. Returns NULL if expr is NULL.</p>\n<pre><code>SELECT MICROSECOND('12:00:00.123456');\n-&gt; 123456\n\nSELECT MICROSECOND('2019-12-31 23:59:59.000010');\n-&gt; 10\n</code></pre>"
  },
  "mid": {
    "syntax": "MID(str,pos,len)",
    "description": "<p>MID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).</p>"
  },
  "minute": {
    "syntax": "MINUTE(time)",
    "description": "<p>Returns the minute for time, in the range 0 to 59, or NULL if time is NULL.</p>\n<pre><code>SELECT MINUTE('2008-02-03 10:05:03');\n-&gt; 5\n</code></pre>"
  },
  "mod": {
    "syntax": "MOD(N,M)",
    "description": "<p>Modulo operation. Returns the remainder of N divided by M. Returns NULL if M or N is NULL.</p>\n<pre><code>SELECT MOD(234, 10);\n-&gt; 4\n</code></pre>\n<p>This function is safe to use with BIGINT values.</p>\n<p>MOD() also works on values that have a fractional part and returns the exact remainder after division:</p>\n<pre><code>SELECT MOD(34.5,3);\n-&gt; 1.5\n</code></pre>"
  },
  "month": {
    "syntax": "MONTH(date)",
    "description": "<p>Returns the month for date, in the range 1 to 12 for January to December, or 0 for dates such as '0000-00-00' or '2008-00-00' that have a zero month part. Returns NULL if date is NULL.</p>\n<pre><code>SELECT MONTH('2008-02-03');\n-&gt; 2\n</code></pre>"
  },
  "monthname": {
    "syntax": "MONTHNAME(date)",
    "description": "<p>Returns the full name of the month for date. The language used for the name is controlled by the value of the lc<em>time</em>names system variable (Section 10.16, “MySQL Server Locale Support”). Returns NULL if date is NULL.</p>\n<pre><code>SELECT MONTHNAME('2008-02-03');\n-&gt; 'February'\n</code></pre>"
  },
  "now": {
    "syntax": "NOW([fsp])",
    "description": "<p>Returns the current date and time as a value in 'YYYY-MM-DD hh:mm:ss' or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone.</p>\n<p>If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.</p>\n<pre><code>SELECT NOW();\n-&gt; '2007-12-15 23:50:26'\n\nSELECT NOW() + 0;\n-&gt; 20071215235026.000000\n</code></pre>"
  },
  "oct": {
    "syntax": "OCT(N)",
    "description": "<p>Returns a string representation of the octal value of N, where N is a longlong (BIGINT) number. This is equivalent to CONV(N,10,8). Returns NULL if N is NULL.</p>\n<pre><code>mysql&gt; SELECT OCT(12);\n        -&gt; '14'\n</code></pre>"
  },
  "octet_length": {
    "syntax": "OCTET_LENGTH(str)",
    "description": "<p>OCTET_LENGTH() is a synonym for LENGTH().</p>"
  },
  "ord": {
    "syntax": "ORD(str)",
    "description": "<p>If the leftmost character of the string str is a multibyte character, returns the code for that character, calculated from the numeric values of its constituent bytes using this formula:</p>\n<pre><code>  (1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ..., mysql&gt; SELECT ORD('2');\n        -&gt; 50\n</code></pre>\n<p>If the leftmost character is not a multibyte character, ORD() returns the same value as the ASCII() function. The function returns NULL if str is NULL.</p>"
  },
  "period_add": {
    "syntax": "PERIOD_ADD(P,N)",
    "description": "<p>Adds N months to period P (in the format YYMM or YYYYMM). Returns a value in the format YYYYMM.</p>\n<p>This function returns NULL if P or N is NULL.</p>\n<pre><code>SELECT PERIOD_ADD(200801,2);\n-&gt; 200803\n</code></pre>"
  },
  "period_diff": {
    "syntax": "PERIOD_DIFF(P1,P2)",
    "description": "<p>Returns the number of months between periods P1 and P2. P1 and P2 should be in the format YYMM or YYYYMM. Note that the period arguments P1 and P2 are not date values.</p>\n<p>This function returns NULL if P1 or P2 is NULL.</p>\n<pre><code>SELECT PERIOD_DIFF(200802,200703);\n-&gt; 11\n</code></pre>"
  },
  "pi": {
    "syntax": "PI()",
    "description": "<p>Returns the value of π (pi). The default number of decimal places displayed is seven, but MySQL uses the full double-precision value internally.</p>\n<pre><code>SELECT PI();\n-&gt; 3.141593\n</code></pre>"
  },
  "position": {
    "syntax": "POSITION(substr IN str)",
    "description": "<p>POSITION(substr IN str) is a synonym forLOCATE(substr,str).</p>"
  },
  "pow": {
    "syntax": "POW(X,Y)",
    "description": "<p>Returns the value of X raised to the power of Y. Returns NULL if X or Y is NULL.</p>\n<pre><code>SELECT POW(2,2);\n-&gt; 4\n\nSELECT POW(2,-2);\n-&gt; 0.25\n</code></pre>"
  },
  "power": {
    "syntax": "POWER(X,Y)",
    "description": "<p>Returns the value of X raised to the power of Y. Returns NULL if X or Y is NULL.</p>\n<pre><code>SELECT POWER(2,2);\n-&gt; 4\n\nSELECT POWER(2,-2);\n-&gt; 0.25\n</code></pre>"
  },
  "quarter": {
    "syntax": "QUARTER(date)",
    "description": "<p>Returns the quarter of the year for date, in the range 1 to 4, or NULL if date is NULL.</p>\n<pre><code>SELECT QUARTER('2008-04-01');\n-&gt; 2\n</code></pre>"
  },
  "quote": {
    "syntax": "QUOTE(str)",
    "description": "<p>Quotes a string to produce a result that can be used as a properly escaped data value in an SQL statement. The string is returned enclosed by single quotation marks and with each instance of backslash (), single quote ('), ASCII NUL, and Control+Z preceded by a backslash. If the argument is NULL, the return value is the word “NULL” without enclosing single quotation marks.</p>\n<pre><code>mysql&gt; SELECT QUOTE('Don\\'t!');\n        -&gt; 'Don\\'t!'\nmysql&gt; SELECT QUOTE(NULL);\n        -&gt; NULL\n</code></pre>\n<p>For comparison, see the quoting rules for literal strings and within the C API in Section&nbsp;9.1.1, “String Literals”, and mysql<em>real</em>escape<em>string</em>quote().</p>"
  },
  "rand": {
    "syntax": "RAND([N])",
    "description": "<p>Returns a random floating-point value v in the range <code>0 &lt;= v &lt; 1.0</code>. To obtain a random integer R in the range i &lt;= R &lt; j, use the expression <code>FLOOR(i + RAND() * (j − i))</code>. For example, to obtain a random integer in the range the range <code>7 &lt;= R &lt; 12</code>, use the following statement:</p>\n<pre><code>SELECT FLOOR(7 + (RAND() * 5));\n</code></pre>\n<p>If an integer argument <code>N</code> is specified, it is used as the seed value:</p>"
  },
  "randians": {
    "syntax": "RADIANS(X)",
    "description": "<p>Returns the argument X, converted from degrees to radians. (Note that π radians equals 180 degrees.) Returns NULL if X is NULL.</p>\n<pre><code>SELECT RADIANS(90);\n-&gt; 1.5707963267949\n</code></pre>"
  },
  "repeat": {
    "syntax": "REPEAT(str,count)",
    "description": "<p>Returns a string consisting of the string str repeated count times. If count is less than 1, returns an empty string. Returns NULL if str or count is NULL.</p>\n<pre><code>mysql&gt; SELECT REPEAT('MySQL', 3);\n        -&gt; 'MySQLMySQLMySQL'\n</code></pre>"
  },
  "replace": {
    "syntax": "REPLACE(str,from_str,to_str)",
    "description": "<p>Returns the string str with all occurrences of the string from<em>str replaced by the string to</em>str. REPLACE() performs a case-sensitive match when searching for from_str.</p>\n<pre><code>mysql&gt; SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -&gt; 'WwWwWw.mysql.com'\n</code></pre>\n<p>This function is multibyte safe. It returns NULL if any of its arguments are NULL.</p>"
  },
  "reverse": {
    "syntax": "REVERSE(str)",
    "description": "<p>Returns the string str with the order of the characters reversed, or NULL if str is NULL.</p>\n<pre><code>mysql&gt; SELECT REVERSE('abc');\n        -&gt; 'cba'\n</code></pre>\n<p>This function is multibyte safe.</p>"
  },
  "right": {
    "syntax": "RIGHT(str,len)",
    "description": "<p>Returns the rightmost <code>len</code> characters from the string str, or NULL if any argument is NULL.</p>\n<pre><code>mysql&gt; SELECT RIGHT('foobarbar', 4);\n        -&gt; 'rbar'\n</code></pre>\n<p>This function is multibyte safe.</p>"
  },
  "round": {
    "syntax": "ROUND(X), ROUND(X,D)",
    "description": "<p>Rounds the argument X to D decimal places. The rounding algorithm depends on the data type of X. D defaults to 0 if not specified. D can be negative to cause D digits left of the decimal point of the value X to become zero. The maximum absolute value for D is 30; any digits in excess of 30 (or -30) are truncated. If X or D is NULL, the function returns NULL.</p>\n<pre><code>SELECT ROUND(-1.23), ROUND(-1.58), ROUND(1.58);\n-&gt; -1, -2, 2\n\nSELECT ROUND(1.298, 1), ROUND(1.298, 0), ROUND(23.298, -1);\n-&gt; 1.3, 1, 20\n</code></pre>"
  },
  "rpad": {
    "syntax": "RPAD(str,len,padstr)",
    "description": "<p>Returns the string str, right-padded with the string padstr to a length of len characters. If str is longer than len, the return value is shortened to len characters. If str, padstr, or len is NULL, the function returns NULL.</p>\n<pre><code>mysql&gt; SELECT RPAD('hi',5,'?');\n        -&gt; 'hi???'\nmysql&gt; SELECT RPAD('hi',1,'?');\n        -&gt; 'h'\n</code></pre>\n<p>his function is multibyte safe.</p>"
  },
  "rtrim": {
    "syntax": "RTRIM(str)",
    "description": "<p>Returns the string str with trailing space characters removed.</p>\n<pre><code>mysql&gt; SELECT RTRIM('barbar   ');\n        -&gt; 'barbar'\n</code></pre>\n<p>This function is multibyte safe, and returns NULL if str is NULL.</p>"
  },
  "sec_to_time": {
    "syntax": "SEC_TO_TIME(seconds)",
    "description": "<p>Returns the seconds argument, converted to hours, minutes, and seconds, as a TIME value. The range of the result is constrained to that of the TIME data type. A warning occurs if the argument corresponds to a value outside that range.</p>\n<p>The function returns NULL if seconds is NULL.</p>\n<pre><code>SELECT SEC_TO_TIME(2378);\n-&gt; '00:39:38'\n\nSELECT SEC_TO_TIME(2378) + 0;\n-&gt; 3938\n</code></pre>"
  },
  "second": {
    "syntax": "SECOND(time)",
    "description": "<p>Returns the second for time, in the range 0 to 59, or NULL if time is NULL.</p>\n<pre><code>SELECT SECOND('10:05:03');\n-&gt; 3\n</code></pre>"
  },
  "sign": {
    "syntax": "SIGN(X)",
    "description": "<p>Returns the sign of the argument as -1, 0, or 1, depending on whether X is negative, zero, or positive. Returns NULL if X is NULL.</p>\n<pre><code>SELECT SIGN(-32);\n-&gt; -1\n\nSELECT SIGN(0);\n-&gt; 0\n\nSELECT SIGN(234);\n-&gt; 1\n</code></pre>"
  },
  "sin": {
    "syntax": "SIN(X)",
    "description": "<p>Returns the sine of X, where X is given in radians. Returns NULL if X is NULL.</p>\n<pre><code>SELECT SIN(PI());\n-&gt; 1.2246063538224e-16\n</code></pre>"
  },
  "soundex": {
    "syntax": "SOUNDEX(str)",
    "description": "<p>Returns a soundex string from str, or NULL if str is NULL. Two strings that sound almost the same should have identical soundex strings. A standard soundex string is four characters long, but the SOUNDEX() function returns an arbitrarily long string. You can use SUBSTRING() on the result to get a standard soundex string. All nonalphabetic characters in str are ignored. All international alphabetic characters outside the A-Z range are treated as vowels.</p>\n<pre><code>mysql&gt; SELECT SOUNDEX('Hello');\n        -&gt; 'H400'\nmysql&gt; SELECT SOUNDEX('Quadratically');\n        -&gt; 'Q36324'\n</code></pre>\n<p>When using SOUNDEX(), you should be aware of the following limitations:</p>\n<p>This function, as currently implemented, is intended to work well with strings that are in the English language only. Strings in other languages may not produce reliable results.</p>\n<p>This function is not guaranteed to provide consistent results with strings that use multibyte character sets, including utf-8. See Bug #22638 for more information.</p>\n<p>This function implements the original Soundex algorithm, not the more popular enhanced version (also described by D. Knuth). The difference is that original version discards vowels first and duplicates second, whereas the enhanced version discards duplicates first and vowels second.</p>"
  },
  "space": {
    "syntax": "SPACE(N)",
    "description": "<p>Returns a string consisting of N space characters, or NULL if N is NULL.</p>\n<pre><code>mysql&gt; SELECT SPACE(6);\n        -&gt; '      '\n</code></pre>"
  },
  "sqrt": {
    "syntax": "SQRT(X)",
    "description": "<p>Returns the square root of a nonnegative number X. If X is NULL, the function returns NULL.</p>\n<pre><code>SELECT SQRT(20);\n-&gt; 4.4721359549996\n</code></pre>"
  },
  "str_to_date": {
    "syntax": "STR_TO_DATE(str,format)",
    "description": "<p>This is the inverse of the DATE<em>FORMAT() function. It takes a string str and a format string format. STR</em>TO<em>DATE() returns a DATETIME value if the format string contains both date and time parts, or a DATE or TIME value if the string contains only date or time parts. If str or format is NULL, the function returns NULL. If the date, time, or datetime value extracted from str cannot be parsed according to the rules followed by the server, STR</em>TO_DATE() returns NULL and produces a warning.</p>\n<p>The server scans str attempting to match format to it. The format string can contain literal characters and format specifiers beginning with %. Literal characters in format must match literally in str. Format specifiers in format must match a date or time part in str. For the specifiers that can be used in format, see the DATE_FORMAT() function description.</p>\n<pre><code>SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n-&gt; '2013-05-01'\n\nSELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n-&gt; '2013-05-01'\n</code></pre>"
  },
  "subdate": {
    "syntax": "SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)",
    "description": "<p>When invoked with the INTERVAL form of the second argument, SUBDATE() is a synonym for DATE<em>SUB(). For information on the INTERVAL unit argument, see the discussion for DATE</em>ADD().</p>\n<pre><code>SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n-&gt; '2007-12-02'\n\nSELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n-&gt; '2007-12-02'\n</code></pre>\n<p>The second form enables the use of an integer value for days. In such cases, it is interpreted as the number of days to be subtracted from the date or datetime expression expr.</p>\n<pre><code>SELECT SUBDATE('2008-01-02 12:00:00', 31);\n -&gt; '2007-12-02 12:00:00'\n</code></pre>\n<p>This function returns NULL if any of its arguments are NULL.</p>"
  },
  "substr": {
    "syntax": "SUBSTR(str,pos), SUBSTR(str FROM pos), SUBSTR(str,pos,len), SUBSTR(str FROM pos FOR len)",
    "description": "<p>SUBSTR() is a synonym for SUBSTRING().</p>"
  },
  "substring": {
    "syntax": "SUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len), SUBSTRING(str FROM pos FOR len)",
    "description": "<p>The forms without a <code>len</code> argument return a substring from string <code>str</code> starting at position <code>pos</code>. The forms with a <code>len</code> argument return a substring <code>len</code> characters long from string <code>str</code>, starting at position <code>pos</code>. The forms that use FROM are standard SQL syntax. It is also possible to use a negative value for <code>pos</code>. In this case, the beginning of the substring is <code>pos</code> characters from the end of the string, rather than the beginning. A negative value may be used for <code>pos</code> in any of the forms of this function. A value of 0 for <code>pos</code> returns an empty string.</p>\n<p>For all forms of SUBSTRING(), the position of the first character in the string from which the substring is to be extracted is reckoned as 1.</p>\n<pre><code>mysql&gt; SELECT SUBSTRING('Quadratically',5);\n        -&gt; 'ratically'\nmysql&gt; SELECT SUBSTRING('foobarbar' FROM 4);\n        -&gt; 'barbar'\nmysql&gt; SELECT SUBSTRING('Quadratically',5,6);\n        -&gt; 'ratica'\nmysql&gt; SELECT SUBSTRING('Sakila', -3);\n        -&gt; 'ila'\nmysql&gt; SELECT SUBSTRING('Sakila', -5, 3);\n        -&gt; 'aki'\nmysql&gt; SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -&gt; 'ki'\n</code></pre>\n<p>This function is multibyte safe. It returns <code>NULL</code> if any of its arguments are <code>NULL</code>.</p>\n<p>If <code>len</code> is less than 1, the result is the empty string.</p>"
  },
  "substring_index": {
    "syntax": "SUBSTRING_INDEX(str,delim,count)",
    "description": "<p>Returns the substring from string str before count occurrences of the delimiter delim. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. SUBSTRING_INDEX() performs a case-sensitive match when searching for delim.</p>\n<p><code>`\nmysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -&gt; 'www.mysql'\nmysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -&gt; 'mysql.com'\n</code></p>\n<p>This function is multibyte safe.</p>\n<p>SUBSTRING_INDEX() returns NULL if any of its arguments are NULL.</p>"
  },
  "subtime": {
    "syntax": "SUBTIME(expr1,expr2)",
    "description": "<p>SUBTIME() returns expr1 − expr2 expressed as a value in the same format as expr1. expr1 is a time or datetime expression, and expr2 is a time expression.</p>\n<p>Resolution of this function's return type is performed as it is for the ADDTIME() function; see the description of that function for more information.</p>\n<pre><code>SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n-&gt; '2007-12-30 22:58:58.999997'\n\nSELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n-&gt; '-00:59:59.999999'\n</code></pre>\n<p>This function returns NULL if expr1 or expr2 is NULL.</p>"
  },
  "sysdate": {
    "syntax": "SYSDATE([fsp])",
    "description": "<p>Returns the current date and time as a value in 'YYYY-MM-DD hh:mm:ss' or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context.</p>\n<p>If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.</p>\n<p>SYSDATE() returns the time at which it executes. This differs from the behavior for NOW(), which returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, NOW() returns the time at which the function or triggering statement began to execute.)</p>"
  },
  "tan": {
    "syntax": "TAN(X)",
    "description": "<p>Returns the tangent of X, where X is given in radians. Returns NULL if X is NULL.</p>\n<pre><code>SELECT TAN(PI()+1);\n-&gt; 1.5574077246549\n</code></pre>"
  },
  "time": {
    "syntax": "TIME(expr)",
    "description": "<p>Extracts the time part of the time or datetime expression expr and returns it as a string. Returns NULL if expr is NULL.</p>\n<pre><code>SELECT TIME('2003-12-31 01:02:03');\n-&gt; '01:02:03'\n\nSELECT TIME('2003-12-31 01:02:03.000123');\n-&gt; '01:02:03.000123\n</code></pre>"
  },
  "time_format": {
    "syntax": "TIME_FORMAT(time,format)",
    "description": "<p>This is used like the DATE<em>FORMAT() function, but the format string may contain format specifiers only for hours, minutes, seconds, and microseconds. Other specifiers produce a NULL or 0. TIME</em>FORMAT() returns NULL if time or format is NULL.</p>\n<p>If the time value contains an hour part that is greater than 23, the %H and %k hour format specifiers produce a value larger than the usual range of 0..23. The other hour format specifiers produce the hour value modulo 12.</p>\n<pre><code>SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n -&gt; '100 100 04 04 4'\n</code></pre>"
  },
  "time_to_sec": {
    "syntax": "TIME_TO_SEC(time)",
    "description": "<p>Returns the time argument, converted to seconds. Returns NULL if time is NULL.</p>\n<pre><code>SELECT TIME_TO_SEC('22:23:00');\n-&gt; 80580\n\nSELECT TIME_TO_SEC('00:39:38');\n-&gt; 2378\n</code></pre>"
  },
  "timediff": {
    "syntax": "TIMEDIFF(expr1,expr2)",
    "description": "<p>TIMEDIFF() returns expr1 − expr2 expressed as a time value. expr1 and expr2 are strings which are converted to TIME or DATETIME expressions; these must be of the same type following conversion. Returns NULL if expr1 or expr2 is NULL.</p>\n<p>The result returned by TIMEDIFF() is limited to the range allowed for TIME values. Alternatively, you can use either of the functions TIMESTAMPDIFF() and UNIX_TIMESTAMP(), both of which return integers.</p>\n<pre><code>SELECT TIMEDIFF('2000-01-01 00:00:00', '2000-01-01 00:00:00.000001');\n-&gt; '-00:00:00.000001'\n\nSELECT TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002');\n-&gt; '46:58:57.999999'\n</code></pre>"
  },
  "timestamp": {
    "syntax": "TIMESTAMP(expr), TIMESTAMP(expr1,expr2)",
    "description": "<p>With a single argument, this function returns the date or datetime expression expr as a datetime value. With two arguments, it adds the time expression expr2 to the date or datetime expression expr1 and returns the result as a datetime value. Returns NULL if expr, expr1, or expr2 is NULL.</p>\n<pre><code>SELECT TIMESTAMP('2003-12-31');\n-&gt; '2003-12-31 00:00:00'\n\nSELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n-&gt; '2004-01-01 00:00:00'\n</code></pre>"
  },
  "timestampadd": {
    "syntax": "TIMESTAMPADD(unit,interval,datetime_expr)",
    "description": "<p>Adds the integer expression interval to the date or datetime expression datetime_expr. The unit for interval is given by the unit argument, which should be one of the following values: MICROSECOND (microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.</p>\n<p>The unit value may be specified using one of keywords as shown, or with a prefix of SQL<em>TSI</em>. For example, DAY and SQL<em>TSI</em>DAY both are legal.</p>\n<p>This function returns NULL if interval or datetime_expr is NULL.</p>\n<pre><code>SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n-&gt; '2003-01-02 00:01:00'\n\nSELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n-&gt; '2003-01-09'\n</code></pre>"
  },
  "timestampdiff": {
    "syntax": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)",
    "description": "<p>Returns datetime<em>expr2 − datetime</em>expr1, where datetime<em>expr1 and datetime</em>expr2 are date or datetime expressions. One expression may be a date and the other a datetime; a date value is treated as a datetime having the time part '00:00:00' where necessary. The unit for the result (an integer) is given by the unit argument. The legal values for unit are the same as those listed in the description of the TIMESTAMPADD() function.</p>\n<pre><code>SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n-&gt; 3\n\nSELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n-&gt; -1\n\nSELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n-&gt; 128885\n</code></pre>"
  },
  "to_base64": {
    "syntax": "TO_BASE64(str)",
    "description": "<p>Converts the string argument to base-64 encoded form and returns the result as a character string with the connection character set and collation. If the argument is not a string, it is converted to a string before conversion takes place. The result is NULL if the argument is NULL. Base-64 encoded strings can be decoded using the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64\">FROM_BASE64()</a> function.</p>\n<pre><code>mysql&gt; SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));\n-&gt; 'JWJj', 'abc'\n</code></pre>\n<p>Different base-64 encoding schemes exist. These are the encoding and decoding rules used by TO<em>BASE64() and FROM</em>BASE64():</p>\n<ul>\n<li>The encoding for alphabet value 62 is '+'.</li>\n<li>The encoding for alphabet value 63 is '/'.</li>\n<li>Encoded output consists of groups of 4 printable characters. Each 3 bytes of the input data are encoded using 4 characters. If the last group is incomplete, it is padded with '=' characters to a length of 4.</li>\n<li>A newline is added after each 76 characters of encoded output to divide long output into multiple lines.</li>\n<li>Decoding recognizes and ignores newline, carriage return, tab, and space.</li>\n</ul>"
  },
  "to_days": {
    "syntax": "TO_DAYS(date)",
    "description": "<p>Given a date date, returns a day number (the number of days since year 0). Returns NULL if date is NULL.</p>\n<pre><code>SELECT TO_DAYS(950501);\n-&gt; 728779\n\nSELECT TO_DAYS('2007-10-07');\n-&gt; 733321\n</code></pre>"
  },
  "to_seconds": {
    "syntax": "TO_SECONDS(expr)",
    "description": "<p>Given a date or datetime expr, returns the number of seconds since the year 0. If expr is not a valid date or datetime value (including NULL), it returns NULL.</p>\n<pre><code>SELECT TO_SECONDS(950501);\n-&gt; 62966505600\n\nSELECT TO_SECONDS('2009-11-29');\n-&gt; 63426672000\n\nSELECT TO_SECONDS('2009-11-29 13:43:32');\n-&gt; 63426721412\n\nSELECT TO_SECONDS( NOW() );\n-&gt; 63426721458\n</code></pre>"
  },
  "truncate": {
    "syntax": "TRUNCATE(X,D)",
    "description": "<p>Returns the number X, truncated to D decimal places. If D is 0, the result has no decimal point or fractional part. D can be negative to cause D digits left of the decimal point of the value X to become zero. If X or D is NULL, the function returns NULL.</p>\n<pre><code>SELECT TRUNCATE(1.223,1);\n-&gt; 1.2\n\nSELECT TRUNCATE(1.999,1);\n-&gt; 1.9\n\nSELECT TRUNCATE(1.999,0);\n-&gt; 1\n\nSELECT TRUNCATE(-1.999,1);\n-&gt; -1.9\n\nSELECT TRUNCATE(122,-2);\n-&gt; 100\n\nSELECT TRUNCATE(10.28*100,0);\n-&gt; 1028\n</code></pre>"
  },
  "unix_timestamp": {
    "syntax": "UNIX_TIMESTAMP([date])",
    "description": "<p>If UNIX_TIMESTAMP() is called with no date argument, it returns a Unix timestamp representing seconds since '1970-01-01 00:00:00' UTC.</p>\n<p>If UNIX_TIMESTAMP() is called with a date argument, it returns the value of the argument as seconds since '1970-01-01 00:00:00' UTC. The server interprets date as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. </p>\n<pre><code>SELECT UNIX_TIMESTAMP();\n-&gt; 1447431666\n\nSELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n-&gt; 1447431619\n\nSELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n-&gt; 1447431619.012\n</code></pre>"
  },
  "utc_date": {
    "syntax": "UTC_DATE()",
    "description": "<p>Returns the current UTC date as a value in 'YYYY-MM-DD' or YYYYMMDD format, depending on whether the function is used in string or numeric context.</p>\n<pre><code>SELECT UTC_DATE(), UTC_DATE() + 0;\n-&gt; '2003-08-14', 20030814\n</code></pre>"
  },
  "utc_time": {
    "syntax": "UTC_TIME([fsp])",
    "description": "<p>Returns the current UTC time as a value in 'hh:mm:ss' or hhmmss format, depending on whether the function is used in string or numeric context.</p>\n<p>If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.</p>\n<pre><code>SELECT UTC_TIME(), UTC_TIME() + 0;\n-&gt; '18:07:53', 180753.000000\n</code></pre>"
  },
  "utc_timestamp": {
    "syntax": "UTC_TIMESTAMP([fsp])",
    "description": "<p>Returns the current UTC date and time as a value in 'YYYY-MM-DD hh:mm:ss' or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context.</p>\n<p>If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.</p>\n<pre><code>SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n-&gt; '2003-08-14 18:08:04', 20030814180804.0000\n</code></pre>"
  },
  "week": {
    "syntax": "WEEK(date[,mode])",
    "description": "<p>This function returns the week number for date. The two-argument form of WEEK() enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from 0 to 53 or from 1 to 53.</p>\n<pre><code>SELECT WEEK('2008-02-20');\n-&gt; 7\n\nSELECT WEEK('2008-02-20',0);\n-&gt; 7\n\nSELECT WEEK('2008-02-20',1);\n-&gt; 8\n\nSELECT WEEK('2008-12-31',1);\n-&gt; 53\n</code></pre>"
  },
  "weekday": {
    "syntax": "WEEKDAY(date)",
    "description": "<p>Returns the weekday index for date (0 = Monday, 1 = Tuesday, … 6 = Sunday). Returns NULL if date is NULL.</p>\n<pre><code>SELECT WEEKDAY('2008-02-03 22:23:00');\n-&gt; 6\n\nSELECT WEEKDAY('2007-11-06');\n-&gt; 1\n</code></pre>"
  },
  "weekofyear": {
    "syntax": "WEEKOFYEAR(date)",
    "description": "<p>Returns the calendar week of the date as a number in the range from 1 to 53. Returns NULL if date is NULL.</p>\n<p>WEEKOFYEAR() is a compatibility function that is equivalent to WEEK(date,3).</p>\n<pre><code>SELECT WEEKOFYEAR('2008-02-20');\n-&gt; 8\n</code></pre>"
  },
  "year": {
    "syntax": "YEAR(date)",
    "description": "<p>Returns the year for date, in the range 1000 to 9999, or 0 for the “zero” date. Returns NULL if date is NULL.</p>\n<pre><code>SELECT YEAR('1987-01-01');\n-&gt; 1987\n</code></pre>"
  },
  "yearweek": {
    "syntax": "YEARWEEK(date), YEARWEEK(date,mode)",
    "description": "<p>Returns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year. Returns NULL if date is NULL.</p>\n<p>The mode argument works exactly like the mode argument to WEEK(). For the single-argument syntax, a mode value of 0 is used. Unlike WEEK(), the value of default<em>week</em>format does not influence YEARWEEK().</p>\n<pre><code>SELECT YEARWEEK('1987-01-01');\n-&gt; 198652\n</code></pre>\n<p>The week number is different from what the WEEK() function would return (0) for optional arguments 0 or 1, as WEEK() then returns the week in the context of the given year.</p>"
  }
}